{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","DUMMY_QUOTES","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","find","console","log","path","exact","to","url"],"mappings":"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","file":"static/js/3.41444792.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3UUcX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__-7mC3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2QbqH\",\"loading\":\"NewCommentForm_loading__27sUb\",\"control\":\"NewCommentForm_control__F1KDV\",\"actions\":\"NewCommentForm_actions__1Z28I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3qglD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__eqAfN\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef,useEffect } from 'react';\n\nimport useHttp from '../hooks/use-http';\nimport {addComment} from '../lib/api';\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, status, error} = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect( () => {\n    if (status === 'completed' && !error){\n      onAddedComment();\n    }\n  }, [status,error])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n    \n    sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && \n        <div className='centered'>\n          <LoadingSpinner />  \n        </div>\n      }\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from './CommentsList';\nimport useHttp from '../hooks/use-http';\nimport {getAllComments} from '../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const {quoteId} = params;\n\n  const {sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n\n  useEffect( () => {\n    sendRequest(params.quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  \n  let comments;\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  },[sendRequest, quoteId]);\n\n    if (status === 'pending'){\n      comments = <div className='centered'><LoadingSpinner></LoadingSpinner></div>\n    }\n\n\n  if (status === 'completed' && loadedComments){\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = <p className='centered'>No comments were added yet!</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler}/>}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","\r\nimport {useEffect} from 'react';\r\nimport {useParams, Route, Link, useRouteMatch} from 'react-router-dom';\r\n\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport Comments from '../components/comments/Comments';\r\nimport useHttp from '../components/hooks/use-http';\r\nimport {getSingleQuote} from '../components/lib/api';\r\n\r\nconst DUMMY_QUOTES = [\r\n    {id: 'q1', author: 'Max', text: 'Learning react is fun'},\r\n    {id: 'q2', author: 'Maximillian', text: 'Learning react is great'},\r\n]\r\n\r\nconst QuoteDetail = () => {\r\n    const match = useRouteMatch();\r\n    const params = useParams();\r\n \r\n    const {quoteId} = params;\r\n    const {sendRequest, status, data: loadedQuote,error} = useHttp(getSingleQuote, true);\r\n\r\n    useEffect( () => {\r\n        sendRequest();\r\n    }, [sendRequest, quoteId])\r\n\r\n    const quote = DUMMY_QUOTES.find(quote => quote.id === params.quoteId);\r\n\r\n    if(status === 'pending'){\r\n        return <div className='centered'>\r\n            <LoadingSpinner />\r\n        </div>\r\n    }\r\n\r\n    if (error){\r\n        return <p className='centered'>{error}</p>\r\n    }\r\n\r\n    if (loadedQuote.text){\r\n        return <p>No quote found!</p>\r\n    }\r\n\r\n    console.log(loadedQuote)\r\n    \r\n    return (\r\n    <>\r\n    <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n    <Route path={match.path} exact>\r\n        <div className='centered'>\r\n            <Link to={`${match.url}/comments`} className='btn--flat'>\r\n                Load Comments\r\n            </Link>\r\n        </div>\r\n    </Route>\r\n    <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n    </Route>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}